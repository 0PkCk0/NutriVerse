openapi: 3.0.0
info:
  title: Nutriverse API
  description: API for user authentication including login, confirmation, and logout.
  version: 1.0.0
servers:
  - url: http://nutriverse.onrender.com/api/v1/
paths:
  /auth:
    post:
      summary: Login a user
      requestBody:
        description: User login credentials
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: yourpassword
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  token:
                    type: string
        '401':
          description: Incorrect credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 401
                  message:
                    type: string
                    example: Incorrect credentials
        '404':
          description: User not found or email not confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: Missing user and/or password
  /auth:
    get:
      summary: Confirm user email
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
          description: Token for email confirmation
      responses:
        '200':
          description: Email successfully confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email successfully confirmed. You can now log in.
        '400':
          description: Invalid or missing token
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Token is missing
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error
  /auth:
    delete:
      summary: Logout a user
      requestBody:
        description: User ID for logout verification
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                _id:
                  type: string
      responses:
        '200':
          description: Successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Logged out
        '400':
          description: Invalid user ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid user
/user:
    post:
      summary: Register a new user
      requestBody:
        description: User registration details
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                weight:
                  type: number
                height:
                  type: number
                age:
                  type: integer
                gender:
                  type: string
                subscriptionsId:
                  type: array
                  items:
                    type: string
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: A confirmation email has been sent to user@example.com.
        '400':
          description: Missing data or email already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Email already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error

  /user/{confirmationToken}:
    put:
      summary: Confirm user registration
      parameters:
        - in: path
          name: confirmationToken
          schema:
            type: string
          required: true
          description: Token for email confirmation
      responses:
        '200':
          description: User confirmed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: User confirmed successfully
        '400':
          description: Invalid token or user already confirmed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: Invalid token

  /user:
    get:
      summary: Get user profile
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      email:
                        type: string
                      weight:
                        type: number
                      height:
                        type: number
                      age:
                        type: integer
                      gender:
                        type: string
                      userType:
                        type: string
                      Profession:
                        type: string
                      timestap:
                        type: string
                      code:
                        type: string
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found

  /user/{subscriptionID}:
    get:
      summary: Get subscription profile
      parameters:
        - in: path
          name: subscriptionID
          schema:
            type: string
          required: true
          description: ID of the subscription user
      responses:
        '200':
          description: Subscription profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  user:
                    type: object
                    properties:
                      name:
                        type: string
                      weight:
                        type: number
                      height:
                        type: number
                      age:
                        type: integer
                      gender:
                        type: string
                      timestap:
                        type: string
                      Profession:
                        type: string
                      subscriptionEndDate:
                        type: string
                      subscriptionStartDate:
                        type: string
        '404':
          description: Subscription ID not found or user not subscribed
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: You are not subscribed to this user or subscription ID not found

  /user:
    put:
      summary: Update user profile
      requestBody:
        description: Updated user profile data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                weight:
                  type: number
                height:
                  type: number
                age:
                  type: integer
                profession:
                  type: string
                gender:
                  type: string
      responses:
        '200':
          description: User profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Updated data
        '400':
          description: User not found or error updating profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: User not found

  /user:
    delete:
      summary: Delete user profile
      responses:
        '200':
          description: User profile deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Deleted data
        '404':
          description: User not found or error deleting profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found
  /messages:
    post:
      summary: Send a message
      description: Endpoint to send a message from one user to another.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                receiver:
                  type: string
                message:
                  type: string
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: sent
        '400':
          description: User not found or other errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
  /messages
    get:
      summary: Get messages with a user
      description: Endpoint to retrieve all messages exchanged with a specific user.
      parameters:
        - in: path
          name: UserEmail
          required: true
          schema:
            type: string
          description: Email address of the user to fetch messages with.
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  messages:
                    type: array
                    items:
                      type: object
                      properties:
                        sender:
                          type: string
                          example: user@example.com
                        text:
                          type: string
                          example: Hello!
        '400':
          description: User not found or other errors
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error
  /professionPlan/{emailUser}:
    get:
      summary: Get plans created by a user
      description: Retrieve fitness plans created by a user (nutritionist or personal trainer) for another user.
      parameters:
        - in: path
          name: emailUser
          required: true
          schema:
            type: string
          description: Email address of the user whose plans are to be retrieved.
      responses:
        '200':
          description: Plans retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 200
                  Plans:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          example: 60cf0c85e207d143a8c4e2ab
                        professionalEmail:
                          type: string
                          example: nutritionist@example.com
                        planName:
                          type: string
                          example: Weight Loss Plan
                        description:
                          type: string
                          example: A personalized plan for weight loss.
                        url:
                          type: string
                          example: https://example.com/weight-loss-plan.pdf
        '404':
          description: User not found or user is not a professionist
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 404
                  message:
                    type: string
                    example: User not found or User not a Professionist
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    example: 500
                  message:
                    type: string
                    example: Internal Server Error